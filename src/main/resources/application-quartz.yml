# quartz 配置
spring:
  quartz:
    auto-startup: true
    startup-delay: 3s
    job-store-type: jdbc #数据库方式
    wait-for-jobs-to-complete-on-shutdown: true
    jdbc:
      initialize-schema: never # 首次可以采用 always, never 不初始化表结构
    properties:
      org:
        quartz:
          scheduler:
            instanceId: AUTO #默认主机名和时间戳生成实例ID,可以是任何字符串，但对于所有调度程序来说，必须是唯一的 对应qrtz_scheduler_state INSTANCE_NAME字段
            instanceName: ${spring.application.name} #defaultScheduler #quartzScheduler
            skipUpdateCheck: true
          jobStore:
            class: org.springframework.scheduling.quartz.LocalDataSourceJobStore  # springboot > 2.5.6后使用这个。
            driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate #我们仅为数据库制作了特定于数据库的代理
            useProperties: false #以指示JDBCJobStore将JobDataMaps中的所有值都作为字符串，因此可以作为名称 - 值对存储而不是在BLOB列中以其序列化形式存储更多复杂的对象。从长远来看，这是更安全的，因为您避免了将非String类序列化为BLOB的类版本问题。
            tablePrefix: qrtz_  #数据库表前缀
            misfireThreshold: 60000 #在被认为“失火”之前，调度程序将“容忍”一个Triggers将其下一个启动时间通过的毫秒数。默认值（如果您在配置中未输入此属性）为60000（60秒）。
            clusterCheckinInterval: 5000 #设置此实例“检入”*与群集的其他实例的频率（以毫秒为单位）。影响检测失败实例的速度。
            isClustered: true #打开群集功能
            acquireTriggersWithinLock: true # 在调度流程的第一步，也就是拉取待即将触发的triggers时，是上锁的状态，即不会同时存在多个线程拉取到相同的trigger的情况，也就避免的重复调度的危险。参考：https://segmentfault.com/a/1190000015492260
          threadPool: #线程池
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
          plugin:
            triggHistory:
              class: org.quartz.plugins.history.LoggingJobHistoryPlugin
            shutdownhook:
              class: org.quartz.plugins.management.ShutdownHookPlugin
              cleanShutdown: true